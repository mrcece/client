//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class cfg_DataStreamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(cfg.DataStream), typeof(System.Object));
		L.RegFunction("From", From);
		L.RegFunction("Clear", Clear);
		L.RegFunction("GetNext", GetNext);
		L.RegFunction("GetString", GetString);
		L.RegFunction("GetFloat", GetFloat);
		L.RegFunction("GetDouble", GetDouble);
		L.RegFunction("GetInt", GetInt);
		L.RegFunction("GetLong", GetLong);
		L.RegFunction("GetBool", GetBool);
		L.RegFunction("GetObject", GetObject);
		L.RegFunction("Record", Record);
		L.RegFunction("Records", Records);
		L.RegFunction("New", _Createcfg_DataStream);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Createcfg_DataStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				cfg.DataStream obj = new cfg.DataStream(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: cfg.DataStream.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int From(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			cfg.DataStream obj = (cfg.DataStream)ToLua.CheckObject<cfg.DataStream>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.From(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cfg.DataStream obj = (cfg.DataStream)ToLua.CheckObject<cfg.DataStream>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNext(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cfg.DataStream obj = (cfg.DataStream)ToLua.CheckObject<cfg.DataStream>(L, 1);
			string o = obj.GetNext();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cfg.DataStream obj = (cfg.DataStream)ToLua.CheckObject<cfg.DataStream>(L, 1);
			string o = obj.GetString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cfg.DataStream obj = (cfg.DataStream)ToLua.CheckObject<cfg.DataStream>(L, 1);
			float o = obj.GetFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cfg.DataStream obj = (cfg.DataStream)ToLua.CheckObject<cfg.DataStream>(L, 1);
			double o = obj.GetDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cfg.DataStream obj = (cfg.DataStream)ToLua.CheckObject<cfg.DataStream>(L, 1);
			int o = obj.GetInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cfg.DataStream obj = (cfg.DataStream)ToLua.CheckObject<cfg.DataStream>(L, 1);
			long o = obj.GetLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			cfg.DataStream obj = (cfg.DataStream)ToLua.CheckObject<cfg.DataStream>(L, 1);
			bool o = obj.GetBool();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			cfg.DataStream obj = (cfg.DataStream)ToLua.CheckObject<cfg.DataStream>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			cfg.CfgObject o = obj.GetObject(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Record(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			cfg.DataStream o = cfg.DataStream.Record(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Records(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			System.Collections.Generic.List<cfg.DataStream> o = cfg.DataStream.Records(arg0, arg1);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

