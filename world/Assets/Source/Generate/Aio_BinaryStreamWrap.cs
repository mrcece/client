//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Aio_BinaryStreamWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Aio.BinaryStream), typeof(System.Object));
		L.RegFunction("AddWriteIndex", AddWriteIndex);
		L.RegFunction("AddReadIndex", AddReadIndex);
		L.RegFunction("toArray", toArray);
		L.RegFunction("CompactBuffer", CompactBuffer);
		L.RegFunction("WriteBytes", WriteBytes);
		L.RegFunction("Clear", Clear);
		L.RegFunction("WriteSure", WriteSure);
		L.RegFunction("Append", Append);
		L.RegFunction("MarshalBool", MarshalBool);
		L.RegFunction("UnmarshalBool", UnmarshalBool);
		L.RegFunction("MarshalByte", MarshalByte);
		L.RegFunction("UnmarshalByte", UnmarshalByte);
		L.RegFunction("MarshalInt", MarshalInt);
		L.RegFunction("UnmarshalInt", UnmarshalInt);
		L.RegFunction("UnmarshalUint", UnmarshalUint);
		L.RegFunction("MarshalLong", MarshalLong);
		L.RegFunction("UnmarshalLong", UnmarshalLong);
		L.RegFunction("UnmarshalUlong", UnmarshalUlong);
		L.RegFunction("MarshalFloat", MarshalFloat);
		L.RegFunction("UnmarshalFloat", UnmarshalFloat);
		L.RegFunction("MarshalDouble", MarshalDouble);
		L.RegFunction("UnmarshalDouble", UnmarshalDouble);
		L.RegFunction("MarshalSize", MarshalSize);
		L.RegFunction("UnmarshalSize", UnmarshalSize);
		L.RegFunction("MarshalString", MarshalString);
		L.RegFunction("UnmarshalString", UnmarshalString);
		L.RegFunction("MarshalBytes", MarshalBytes);
		L.RegFunction("UnmarshalBytes", UnmarshalBytes);
		L.RegFunction("TryUnmarshalBytes", TryUnmarshalBytes);
		L.RegFunction("MarshalBinaryStream", MarshalBinaryStream);
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreateAio_BinaryStream);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ReadIndex", get_ReadIndex, null);
		L.RegVar("WriteIndex", get_WriteIndex, null);
		L.RegVar("Bytes", get_Bytes, null);
		L.RegVar("Remaining", get_Remaining, null);
		L.RegVar("Capacity", get_Capacity, null);
		L.RegVar("NotCompactWritable", get_NotCompactWritable, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAio_BinaryStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Aio.BinaryStream obj = new Aio.BinaryStream();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				Aio.BinaryStream obj = new Aio.BinaryStream(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				Aio.BinaryStream obj = new Aio.BinaryStream(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				Aio.BinaryStream obj = new Aio.BinaryStream(arg0, arg1, arg2);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Aio.BinaryStream.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddWriteIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AddWriteIndex(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddReadIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AddReadIndex(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int toArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			byte[] o = obj.toArray();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompactBuffer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			obj.CompactBuffer();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.WriteBytes(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteSure(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteSure(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Append(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.Append(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarshalBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.MarshalBool(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmarshalBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			bool o = obj.UnmarshalBool();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarshalByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.MarshalByte(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmarshalByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			byte o = obj.UnmarshalByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarshalInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MarshalInt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmarshalInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			int o = obj.UnmarshalInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmarshalUint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			uint o = obj.UnmarshalUint();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarshalLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.MarshalLong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmarshalLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			long o = obj.UnmarshalLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmarshalUlong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			ulong o = obj.UnmarshalUlong();
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarshalFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.MarshalFloat(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmarshalFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			float o = obj.UnmarshalFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarshalDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.MarshalDouble(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmarshalDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			double o = obj.UnmarshalDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarshalSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MarshalSize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmarshalSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			int o = obj.UnmarshalSize();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarshalString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			string arg0 = ToLua.CheckString(L, 2);
			obj.MarshalString(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmarshalString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			string o = obj.UnmarshalString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarshalBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.MarshalBytes(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnmarshalBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			byte[] o = obj.UnmarshalBytes();
			LuaDLL.tolua_pushlstring(L, o, o.Length);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryUnmarshalBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			Aio.BinaryStream.Msg arg0 = (Aio.BinaryStream.Msg)ToLua.CheckObject<Aio.BinaryStream.Msg>(L, 2);
			Aio.BinaryStream.UnmarshalError o = obj.TryUnmarshalBytes(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarshalBinaryStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			Aio.BinaryStream arg0 = (Aio.BinaryStream)ToLua.CheckObject(L, 2, typeof(Aio.BinaryStream));
			obj.MarshalBinaryStream(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)ToLua.CheckObject(L, 1, typeof(Aio.BinaryStream));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReadIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)o;
			int ret = obj.ReadIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WriteIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)o;
			int ret = obj.WriteIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WriteIndex on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Bytes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)o;
			byte[] ret = obj.Bytes;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Bytes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Remaining(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)o;
			int ret = obj.Remaining;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Remaining on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Capacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)o;
			int ret = obj.Capacity;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Capacity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NotCompactWritable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Aio.BinaryStream obj = (Aio.BinaryStream)o;
			int ret = obj.NotCompactWritable;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index NotCompactWritable on a nil value");
		}
	}
}

