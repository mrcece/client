//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetManager), typeof(System.Object));
		L.RegFunction("Start", Start);
		L.RegFunction("Update", Update);
		L.RegFunction("Connect", Connect);
		L.RegFunction("onClose", onClose);
		L.RegFunction("onConnected", onConnected);
		L.RegFunction("onRecv", onRecv);
		L.RegFunction("Send", Send);
		L.RegFunction("New", _CreateNetManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Ins", get_Ins, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNetManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NetManager obj = new NetManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NetManager.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetManager obj = (NetManager)ToLua.CheckObject<NetManager>(L, 1);
			obj.Start();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetManager obj = (NetManager)ToLua.CheckObject<NetManager>(L, 1);
			obj.Update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetManager obj = (NetManager)ToLua.CheckObject<NetManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.Connect(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onClose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetManager obj = (NetManager)ToLua.CheckObject<NetManager>(L, 1);
			Aio.Connection arg0 = (Aio.Connection)ToLua.CheckObject(L, 2, typeof(Aio.Connection));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.onClose(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onConnected(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetManager obj = (NetManager)ToLua.CheckObject<NetManager>(L, 1);
			Aio.Connection arg0 = (Aio.Connection)ToLua.CheckObject(L, 2, typeof(Aio.Connection));
			obj.onConnected(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onRecv(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetManager obj = (NetManager)ToLua.CheckObject<NetManager>(L, 1);
			Aio.Connection arg0 = (Aio.Connection)ToLua.CheckObject(L, 2, typeof(Aio.Connection));
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.onRecv(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetManager obj = (NetManager)ToLua.CheckObject<NetManager>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Send(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Ins(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, NetManager.Ins);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

